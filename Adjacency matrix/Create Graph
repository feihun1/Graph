/*图的邻接矩阵表示法*/
#include <stdio.h>
#include <stdlib.h>
#define MaxVertexNum 100	/*最大顶点数设为100*/
typedef int Vertex;			/*用顶点下标表示顶点*/
typedef int WeightType;		/*边的权值设为整型*/
typedef char DataType;		/*顶点存储的数据类型设为字符型*/
/*边的定义*/
typedef struct ENode *PtrToENode;
struct ENode
{
	Vertex V1, V2;			/*有向边<V1,V2>*/
	WeightType Weight;		/*权重*/
};
typedef PtrToENode Edge;
/*结点的定义*/
typedef struct GNode *PtrToGNode;
struct GNode
{
	int Nv;		/*顶点数*/
	int Ne;		/*边数*/
	WeightType G[MaxVertexNum][MaxVertexNum];	/*邻接矩阵*/
	DataType Data[MaxVertexNum];		/*存顶点的数据*/
};
typedef PtrToGNode MGraph;
/*初始化一个有VertexNum个顶点但没有边的图*/
MGraph CreateGraph(int VertexNum)
{
	Vertex V, W;
	MGraph Graph;
	Graph = (MGraph)malloc(sizeof(struct GNode));
	Graph->Nv = VertexNum;
	Graph->Ne = 0;
	for (V = 0; V < MaxVertexNum; V++)
	{
		for (W = 0; W < MaxVertexNum; W++)
			Graph->G[V][W] = 0;
	}
	return Graph;
}
/*插入边*/
void InsertEdge(MGraph Graph, Edge E)
{
	Graph->G[E->V1][E->V2] = E->Weight;
	/*无向图*/
	Graph->G[E->V2][E->V1] = E->Weight;
}
MGraph BuildGraph()
{
	MGraph Graph;
	Edge E;
	Vertex V;
	int Nv, i;
	scanf("%d", &Nv);		/*读入顶点个数*/
	Graph = CreateGraph(Nv);
	scanf("%d", &(Graph->Ne));		/*读入边的个数*/
	if (Graph->Ne != 0)
		E = (Edge)malloc(sizeof(struct ENode));		/*建立边结点*/
													/*读入边，格式为：起点，终点，权重，插入到邻接矩阵中*/
	for (i = 0; i < Graph->Ne; i++)
	{
		scanf("%d %d %d", &E->V1, &E->V2, &E->Weight);
		InsertEdge(Graph, E);
	}
	/*读入顶点数据*/
	for (i = 0; i < Graph->Nv; i++)
		scanf("%c", &(Graph->Data[i]));
	return Graph;
}
