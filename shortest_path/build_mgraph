MGraph *build_mgraph()
{
	int i, j;
	int num_e = 0;
	MGraph *mgraph = (MGraph *)malloc(sizeof(MGraph));
	int matrix[NUM][NUM]= { { 0,4,6,6,INT_MAX,INT_MAX,INT_MAX },
	{ INT_MAX,0,1,INT_MAX,7,INT_MAX,INT_MAX },
	{ INT_MAX,INT_MAX,0,INT_MAX,6,4,INT_MAX },
	{ INT_MAX,INT_MAX,2,0,INT_MAX,5,INT_MAX },
	{ INT_MAX,INT_MAX,INT_MAX,INT_MAX,0,INT_MAX,6 },
	{ INT_MAX,INT_MAX,INT_MAX,INT_MAX,1,0,8 },
	{ INT_MAX,INT_MAX,INT_MAX,INT_MAX,INT_MAX,INT_MAX,0 } };
	for (i = 0; i < NUM; i++)
	{
		for (j = 0; j < NUM; j++)
		{
			mgraph->edges[i][j] = matrix[i][j];
			if (matrix[i][j] != 0 && matrix[i][j] != INT_MAX)
				num_e++;
		}
	}
	mgraph->n = NUM;
	mgraph->e = num_e;
	printf("node=%d;edges=%d\n", mgraph->n, mgraph->e);
	for (i = 0; i < NUM; i++)
	{
		for (j = 0; j < NUM; j++)
		{
			if (mgraph->edges[i][j] != INT_MAX)
				printf("%3d", mgraph->edges[i][j]);
			else
				printf("%3c", '&');
		}
		printf("\n");
	}
	return mgraph;
}
